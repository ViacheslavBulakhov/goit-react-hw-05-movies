{"version":3,"file":"static/js/375.2b0a3b83.chunk.js","mappings":"gUAGaA,EAAgBC,EAAAA,GAAAA,OAAH,8bAkBbC,EAAaD,EAAAA,GAAAA,KAAH,8KASVE,EAAmBF,EAAAA,GAAAA,OAAH,oRAchBG,GAAiBH,EAAAA,EAAAA,IAAOI,EAAAA,IAAPJ,CAAH,4EAMdK,EAAkBL,EAAAA,GAAAA,MAAH,2P,SCvCb,SAASM,EAAT,GAAkC,IAAD,EAAZC,EAAY,EAAZA,SAClC,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,OACE,SAACX,EAAD,WACE,UAACE,EAAD,CAAYM,SAAUA,EAAtB,WACE,SAACL,EAAD,CAAkBS,KAAK,SAAvB,UACE,SAACR,EAAD,OAGF,SAACE,EAAD,CACEM,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SAAU,SAAAC,GAAC,MACiB,KAA1BA,EAAEC,OAAOC,MAAMC,OACXT,EAAgB,CAAEU,MAAOJ,EAAEC,OAAOC,MAAMC,SACxCT,EAAgB,CAAC,EAHZ,EAKXQ,MAAK,UAAET,EAAaY,IAAI,gBAAnB,QAA+B,SAK7C,C,cC1BKC,EAAU,mCAED,SAASC,IAAU,IAAD,IAC/B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAuBlB,EAAAA,EAAAA,MAAhBC,GAAP,eACA,GAAgCe,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEA,GAAsCJ,EAAAA,EAAAA,WACpC,kCAAMf,EAAaY,IAAI,gBAAvB,QAAmC,EAAnC,IADF,eAAOQ,EAAP,KAAoBC,EAApB,KAIMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,6FACEL,GAAY,GADd,SAGUM,EAHV,4DAGqEZ,EAHrE,kBAGsFO,GAHtF,SAI2BM,EAAAA,EAAAA,IAAUD,GAJrC,UAMyC,KAF/BE,EAJV,QAMiBC,KAAKC,QAAQC,OAN9B,uBAOMC,IAAAA,OAAAA,QACE,4EARR,0BAaId,EAASU,EAASC,MAClBT,GAAY,GAdhB,kDAgBIA,GAAY,GACZa,QAAQC,IAAI,KAAMC,SAjBtB,2DALc,sBACM,KAAhBd,GADU,mCA0Bde,EACD,GAAE,CAACf,IAYJ,OACE,iCACE,SAACvB,EAAD,CAAWC,SAZM,SAAAS,GAAM,IAAD,EACxBA,EAAE6B,iBACGpC,EAAaY,IAAI,UACpBmB,IAAAA,OAAAA,QACE,+DAGJV,EAAc,UAACrB,EAAaY,IAAI,gBAAlB,QAA8B,GAC7C,IAKIM,IAAY,SAACmB,EAAA,EAAD,KACZ,UAAArB,EAAMa,eAAN,eAAeC,QAAS,IACvB,kCACGd,EAAMa,eADT,aACG,EAAeS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OAClB,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMrB,GAAlC,SACGkB,KAFID,EADS,QAW7B,C","sources":["components/searchbar/Searchbar.styled.jsx","components/searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\n\nexport const SearchbarWrap = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #3f51b5;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  background-color: inherit;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\nexport const SearchFormIcon = styled(AiOutlineSearch)`\n  width: 20px;\n  height: 20px;\n  color: #000000;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  SearchbarWrap,\n  SearchForm,\n  SearchFormButton,\n  SearchFormIcon,\n  SearchFormInput,\n} from './Searchbar.styled';\n\nexport default function Searchbar({ onSubmit }) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  return (\n    <SearchbarWrap>\n      <SearchForm onSubmit={onSubmit}>\n        <SearchFormButton type=\"submit\">\n          <SearchFormIcon />\n        </SearchFormButton>\n\n        <SearchFormInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search Movies\"\n          onChange={e =>\n            e.target.value.trim() !== ''\n              ? setSearchParams({ query: e.target.value.trim() })\n              : setSearchParams({})\n          }\n          value={searchParams.get('query') ?? ''}\n        />\n      </SearchForm>\n    </SearchbarWrap>\n  );\n}\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\n\nimport Searchbar from 'components/searchbar/Searchbar';\nimport Loader from '../components/loader/Loader';\n\nconst API_KEY = '663a9254ccdd905d0193e78c0f67091c';\n\nexport default function Movies() {\n  const [films, setFilms] = useState([]);\n  const [searchParams] = useSearchParams();\n  const [isLoader, setIsLoader] = useState(false);\n\n  const [searchValue, setSearchValue] = useState(\n    () => searchParams.get('query') ?? ''\n  );\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (searchValue === '') {\n      return;\n    }\n\n    async function fetchTrendMovies() {\n      setIsLoader(true);\n      try {\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchValue}`;\n        const response = await axios.get(url);\n\n        if (response.data.results.length === 0) {\n          Notiflix.Notify.failure(\n            'Sorry, there are no images matching your search query. Please try again.'\n          );\n          return;\n        }\n\n        setFilms(response.data);\n        setIsLoader(false);\n      } catch (error) {\n        setIsLoader(false);\n        console.log(error.message);\n      }\n    }\n\n    fetchTrendMovies();\n  }, [searchValue]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!searchParams.get('query')) {\n      Notiflix.Notify.warning(\n        'Serach field is empty,please write something and try again.'\n      );\n    }\n    setSearchValue(searchParams.get('query') ?? '');\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={handleSubmit} />\n      {isLoader && <Loader />}\n      {films.results?.length > 0 && (\n        <ul>\n          {films.results?.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"names":["SearchbarWrap","styled","SearchForm","SearchFormButton","SearchFormIcon","AiOutlineSearch","SearchFormInput","Searchbar","onSubmit","useSearchParams","searchParams","setSearchParams","type","autoComplete","autoFocus","placeholder","onChange","e","target","value","trim","query","get","API_KEY","Movies","useState","films","setFilms","isLoader","setIsLoader","searchValue","setSearchValue","location","useLocation","useEffect","url","axios","response","data","results","length","Notiflix","console","log","message","fetchTrendMovies","preventDefault","Loader","map","id","title","to","state","from"],"sourceRoot":""}